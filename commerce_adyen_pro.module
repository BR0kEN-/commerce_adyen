<?php
/**
 * @file
 * Lush Adyen Gateways.
 */

define('COMMERCE_ADYEN_PRO_RETURN_URL', 'commerce/adyen_pro');

/**
 * Implementation of hook_menu().
 */
function commerce_adyen_pro_menu() {
  $items[COMMERCE_ADYEN_PRO_RETURN_URL] = [
    'title' => 'adyen response',
    'page callback' => 'commerce_adyen_pro_handle_response',
    'access arguments' => ['access checkout'],
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_adyen_pro_commerce_payment_method_info() {
  $payment_methods = [];

  $payment_methods['adyen_pro'] = [
    'base' => 'commerce_adyen_pro',
    'method_id' => 'adyen_pro',
    'display_title' => t('Adyen PRO'),
    'title' => t('Adyen PRO'),
    'description' => t('Redirect users to submit payments through Adyen.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  ];

  return $payment_methods;
}

/**
 * Payment method callback; return the settings form for a payment method.
 *
 * @param $settings
 *   An array of the current settings.
 * @return
 *   A form snippet.
 */
function commerce_adyen_pro_settings_form(array $settings = NULL) {
  $settings += [
    'merchant_account' => '',
    'skin_code' => '',
    'hmac' => '',
    'hmac_type' => '',
    'is_test' => TRUE
  ];

  $form['url'] = [
    '#markup' => t('Please use this URL for the result URL settings: @url', [
      '@url' => url(COMMERCE_ADYEN_PRO_RETURN_URL, ['absolute' => TRUE])
    ]),
  ];

  $form['is_test'] = [
    '#type' => 'checkbox',
    '#title' => 'Testing Mode',
    '#default_value' => $settings['is_test'],
  ];

  $form['merchant_account'] = [
    '#type' => 'textfield',
    '#title' => t('Merchant Account'),
    '#default_value' => $settings['merchant_account'],
    '#description' => t('Don`t confuse this with your Adyen account name. You find the right value in the backend in the accounts list.'),
    '#required' => TRUE,
  ];

  $form['skin_code'] = [
    '#type' => 'textfield',
    '#title' => t('Skin Code'),
    '#default_value' => $settings['skin_code'],
    '#required' => TRUE,
  ];

  $form['hmac'] = [
    '#type' => 'textfield',
    '#title' => t('HMAC'),
    '#default_value' => $settings['hmac'],
    '#description' => t('Please make sure you have the same HMAC value set here and in the Adyen back end.'),
    '#required' => TRUE,
  ];

  $form['hmac_type'] = [
    '#type' => 'select',
    '#title' => t('HMAC type'),
    '#description' => t('Please make sure you have the same HMAC type set here and in the Adyen back end.'),
    '#options' => [
      'sha1' => t('SHA1'),
      'sha256' => t('SHA256'),
    ],
    '#empty_option' => t('-- Select HMAC type --'),
    '#default_value' => $settings['hmac_type'],
    '#required' => TRUE
  ];

  $form['shopper_locale'] = [
    '#type' => 'select',
    '#title' => t('Shopper locale'),
    '#options' => _commerce_adyen_pro_support_language(),
    '#default_value' => empty($settings['shopper_locale']) ? language_default('language') : $settings['shopper_locale'],
    '#empty_option' => t('-- Select shopper locale --'),
    '#description' => t('A combination of language code and country code to specify the language used in the session.'),
  ];

  return $form;
}

/**
 * Payment method callback.
 *
 * @param array $form
 *   Existing form.
 * @param array $form_state
 *   Drupal form state.
 * @param stdClass $order
 *   Commerce order object.
 * @param array $payment_method
 *   Payment method settings.
 *
 * @return array
 *   Request parameters to Adyen.
 */
function commerce_adyen_pro_redirect_form(array $form, array &$form_state,  \stdClass $order, array $payment_method) {
  if (!_commerce_adyen_pro_check_account($payment_method['settings'])) {
    return [];
  }

  $settings = $payment_method['settings'];
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total_total = $order_wrapper->commerce_order_total->value();
  $user = user_load($order->uid);

  // Payment fields.
  //
  // @link https://docs.adyen.com/developers/hpp-manual#hpppaymentfields
  $data = [
    // Amount specified in minor units.
    'paymentAmount' => $total_total['amount'],
    // The three-letter capitalised ISO currency code to pay in i.e. EUR.
    'currencyCode' => $total_total['currency_code'],
    // The date with in which the ordered goods or services need to be shipped
    // or provided to the buyer.
    'shipBeforeDate' => date('Y-m-d', strtotime('+5 day')),
    // The merchant reference is your reference for the payment.
    'merchantReference' => $order->order_id,
    // The skin code that should be used for the payment.
    'skinCode' => $settings['skin_code'],
    // The merchant account you want to process this payment with.
    'merchantAccount' => $settings['merchant_account'],
    // The final time by which a payment needs to have been made.
    'sessionValidity' => date(DATE_ATOM, strtotime('+1 hour')),
    // The e-mailaddress of the shopper.
    'shopperEmail' => $user->mail,
    // The shopper reference, i.e. the shopper ID.
    'shopperReference' => $order->uid,
    // This field willl be passed back as-is on the return URL when the shopper
    // completes (or abandons) the payment and returns to your shop.
    'merchantReturnData' => $order->data['payment_redirect_key'],
    // A combination of language code and country code to specify the language
    // used in the session i.e. en_GB.
    'shopperLocale' => $settings['shopper_locale'],
  ];

  // Base64-encode the binary result of the HMAC computation.
  $data['merchantSig'] = _commerce_adyen_pro_signature_calculation($data, $settings, 'request');

  // Allow modules to alter parameters of the request.
  drupal_alter('commerce_adyen_pro_redirect_form_data', $data, $order);

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = [
        '#type' => 'hidden',
        '#value' => $value,
      ];
    }
  }

  $form['#action'] = _commerce_adyen_pro_server_url($settings['is_test']);

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Proceed to Adyen'),
  ];

  return $form;
}

/**
 * Here the real payment processing is done.
 */
function commerce_adyen_pro_handle_response() {
  $data = $_GET;
  $payment_method = commerce_payment_method_instance_load('adyen_pro|commerce_payment_adyen_pro');

  if ($data['merchantSig'] !== _commerce_adyen_pro_signature_calculation($data, $payment_method['settings'], 'response')) {
    watchdog('commerce_adyen', t('Received adyen response with invalid HMAC signature.'), [], WATCHDOG_ERROR);
    _commerce_adyen_pro_broken_response();
  }

  if (!is_numeric($data['merchantReference'])) {
    watchdog('commerce_adyen', t('Received adyen response with invalid merchantReference.'), [], WATCHDOG_ERROR);
    _commerce_adyen_pro_broken_response();
  }

  if (
    !empty($data['authResult']) &&
    !in_array($data['authResult'], ['AUTHORISED', 'REFUSED', 'ERROR', 'CANCELLED', 'PENDING'])
  ) {
    watchdog('commerce_adyen', t('Received adyen response with invalid authResult.'), [], WATCHDOG_ERROR);
    _commerce_adyen_pro_broken_response();
  }


  $order = commerce_order_load($data['merchantReference']);
  $transaction = commerce_payment_transaction_load_multiple([], ['order_id' =>  $order->order_id]);
  $transaction = !empty($transaction) ? array_shift($transaction) : commerce_payment_transaction_new('adyen_pro', $order->order_id);

  switch ($data['authResult']) {
    case 'AUTHORISED':
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      $total_total = $order_wrapper->commerce_order_total->value();

      $transaction->instance_id = $payment_method['instance_id'];
      $transaction->message = t('The payment has completed.');
      $transaction->amount = $total_total['amount'];
      $transaction->currency_code = $total_total['currency_code'];
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->remote_status = $data['authResult'];
      $transaction->remote_id = $data['pspReference'];
      $transaction->payload[REQUEST_TIME] = $data;
      $transaction->uid = $order->uid;
      break;

    case 'PENDING':
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->message = t('The payment is pending because systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment.');
      _commerce_adyen_pro_response_message($data['authResult']);
      break;

    case 'ERROR':
    case 'REFUSED':
    case 'CANCELLED':
      _commerce_adyen_pro_response_message($data['authResult']);
      commerce_payment_redirect_pane_previous_page($order);
      break;
  }

  if (in_array($data['authResult'], ['AUTHORISED', 'PENDING'])) {
    commerce_payment_transaction_save($transaction);
    commerce_payment_redirect_pane_next_page($order);
  }

  drupal_goto(commerce_checkout_order_uri($order));
}

/**
 * Calculation merchant signature.
 *
 * @param array $data
 *   Payment data.
 * @param array $settings
 *   Payment method settings.
 * @param string $operation
 *   The operation to be performed.
 *
 * @return string
 *   Merchant signature.
 */
function _commerce_adyen_pro_signature_calculation(array $data, array $settings, $operation) {
  $sign_data = '';

  switch ($settings['hmac_type']) {
    case 'sha256':
      $escapeval = function($val) {
        return str_replace(':', '\\:', str_replace('\\', '\\\\', $val));
      };

      // Sort the array by key using SORT_STRING order
      ksort($data, SORT_STRING);

      // Generate the signing data string
      $sign_data = implode(':', array_map($escapeval, array_merge(array_keys($data), array_values($data))));

      // base64-encode the binary result of the HMAC computation
      $sign_data = base64_encode(hash_hmac($settings['hmac_type'], $sign_data, pack('H*', $settings['hmac']), TRUE));
      break;

    case 'sha1':
      if ('request' === $operation) {
        // shopperLocale is passed as a parameter, but it is not used in the
        // signing string.
        unset($data['shopperLocale']);

        //The signature is generated by concatenating the values of a number
        // of the payment session fields.
        foreach ($data as $value) {
          $sign_data .= $value;
        }
      }
      else {
        foreach ([
                   'authResult',
                   'pspReference',
                   'merchantReference',
                   'skinCode',
                   'merchantReturnData',
                 ] as $name) {
          if (isset($data[$name])) {
            $sign_data .= $data[$name];
          }
        }
      }

      // Base64-encode the binary result of the HMAC computation.
      $sign_data = base64_encode(pack('H*', hash_hmac($settings['hmac_type'], $sign_data, $settings['hmac'])));
      break;
  }

  return $sign_data;
}

/**
 * Returns the URL to the specified Adyen server.
 *
 * @param int $is_test
 *   Test server checking.
 *
 * @return string
 *   Server URL.
 */
function _commerce_adyen_pro_server_url($is_test) {
  return empty($is_test) ? 'https://live.adyen.com/hpp/pay.shtml' : 'https://test.adyen.com/hpp/pay.shtml';
}

/**
 * Adyen account validate.
 *
 * @param array $settings
 *   Configuration of Adyen account.
 *
 * @return bool
 *   A adyen account is checking.
 */
function _commerce_adyen_pro_check_account(array $settings) {
  $result = TRUE;

  if (empty($settings['merchant_account'])) {
    drupal_set_message(t('No merchant account has been specified.'), 'error');
    $result = FALSE;
  }

  if (empty($settings['skin_code'])) {
    drupal_set_message(t('No skin code has been specified.'), 'error');
    $result = FALSE;
  }

  if (empty($settings['hmac'])) {
    drupal_set_message(t('No hmac has been specified.'), 'error');
    $result = FALSE;
  }

  if (empty($settings['hmac_type'])) {
    drupal_set_message(t('You not select HMAC type'), 'error');
    $result = FALSE;
  }

  return $result;
}

/**
 * Show message according to payment status.
 *
 * @param string $status
 *   Payment status
 */
function _commerce_adyen_pro_response_message($status) {
  switch ($status) {
    case 'REFUSED':
    case 'ERROR':
      drupal_set_message(t('Payment authorisation was not successful. Please try again.'), 'error');
      break;

    case 'CANCELLED':
      drupal_set_message(t('Payment cancelled'), 'status');
      break;

    case 'PENDING':
      drupal_set_message(t('Payment authorisation was not fully completed.'), 'error');
      break;
  }
}

/**
 * Display error about failure payment.
 */
function _commerce_adyen_pro_broken_response() {
  drupal_set_message(t('Communication failure. Please contact the system administrator.'), 'error');
  // We don't call commerce_payment_redirect_pane_previous_page($order) here
  // because we cannot trust the data we received.
  drupal_goto();
}
/**
 * Returns an array of all possible languages.
 *
 * @link https://docs.adyen.com/developers/hpp-manual#createaskin
 *
 * @return array
 *   Language list.
 */
function _commerce_adyen_pro_support_language() {
  return [
    'zh' => 'Chinese – Traditional',
    'cz' => 'Czech',
    'da' => 'Danish',
    'nl' => 'Dutch',
    'en_GB' => 'English – British',
    'en_CA' => 'English – Canadian',
    'en_US' => 'English – US',
    'fi' => 'Finnish',
    'fr' => 'French',
    'fr_BE' => 'French – Belgian',
    'fr_CA' => 'French – Canadian',
    'fr_CH' => 'French – Swiss',
    'fy_NL' => 'Frisian',
    'de' => 'German',
    'el' => 'Greek',
    'hu' => 'Hungarian',
    'it' => 'Italian',
    'li' => 'Lithuanian',
    'no' => 'Norwegian',
    'pl' => 'Polish',
    'pt' => 'Portuguese',
    'ru' => 'Russian',
    'sk' => 'Slovak',
    'es' => 'Spanish',
    'sv' => 'Swedish',
    'th' => 'Thai',
    'tr' => 'Turkish',
    'uk' => 'Ukrainian',
  ];
}
